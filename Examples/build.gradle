//******************************************************************************
// SCICHART® Copyright SciChart Ltd. 2011-2016. All rights reserved.
//
// Web: http://www.scichart.com
// Support: support@scichart.com
// Sales:   sales@scichart.com
//
// build.gradle is part of the SCICHART® Examples. Permission is hereby granted
// to modify, create derivative works, distribute and publish any part of this source
// code whether for commercial, private or personal use.
//
// The SCICHART® examples are distributed in the hope that they will be useful, but
// without any warranty. It is provided "AS IS" without warranty of any kind, either
// expressed or implied.
//******************************************************************************

apply plugin: 'java'
// Top-level build file where you can add configuration options common to all sub-projects/modules.
buildscript {
    ext.kotlin_version = '1.6.0-RC2'
    repositories {
        google()
        mavenCentral()
    }
    dependencies {
        classpath 'com.android.tools.build:gradle:7.0.3'
        // NOTE: Do not place your application dependencies here; they belong
        // in the individual module build.gradle files

        classpath 'com.github.triplet.gradle:play-publisher:1.2.2'
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
    }
}

java {
    sourceCompatibility = JavaVersion.VERSION_1_8
    targetCompatibility = JavaVersion.VERSION_1_8
}

ext {
    minSdkVersion = project.hasProperty('minSdkVersion') ? project.getProperty('minSdkVersion') : 19
    compileSdkVersion = project.hasProperty('compileSdkVersion') ? project.getProperty('compileSdkVersion') : 31
    buildToolsVersion = project.hasProperty('buildToolsVersion') ? project.getProperty('buildToolsVersion') : '31.0.0'
    ndkVersion = project.hasProperty('ndkVersion') ? project.getProperty('ndkVersion') : '21.4.7075529'

    androidxAnnotationVersion = project.hasProperty('androidxAnnotationVersion') ? project.getProperty('androidxAnnotationVersion') : '1.1.0'

    testInstrumentationRunner = "androidx.test.runner.AndroidJUnitRunner"

    junitVersion = '4.13'
    junitTestRunnerVersion = '1.1.3'
    testRunnerVersion = '1.4.0'
    hamcrestVersion = '2.2'
    mockitoVersion = '2.27.0'
    robolectricVersion = '4.7.3'
    androidTestCore = '1.1.0'

    abiFiltersList = ['x86', 'x86_64', 'armeabi-v7a', 'arm64-v8a']

    sourceCompatibility = JavaVersion.VERSION_1_8

    minifyEnabled = true

    versionCode = project.hasProperty('versionCode') ? project.getProperty('versionCode').toInteger() : 1
    versionName = project.hasProperty('versionName') ? project.getProperty('versionName') : "1.0"
    documentationFolder = "${rootDir}/outputJavadoc/"

    availableProcessors = Runtime.runtime.availableProcessors()
}

//@BEGINDELETE
task deleteExistingZip(type: Delete) {
    delete file("outputAar/sciChart.zip")
}

task publishSciChartToMaven() {
    description "Publishes SciChart libraries to Maven"
}

gradle.projectsEvaluated {
    deleteExistingZip.dependsOn "" +
            ":core:testReleaseUnitTest",
            ":data:testReleaseUnitTest",
            ":drawing:testReleaseUnitTest",
            ":charting:testReleaseUnitTest",
            ":charting3d:testReleaseUnitTest",
            ":extensions:testReleaseUnitTest",
            ":extensions3d:testReleaseUnitTest"

    tasks.findByPath(":core:publishAarPublicationToMavenRepository").dependsOn ":core:generateReleaseJavadocJar"
    tasks.findByPath(":data:publishAarPublicationToMavenRepository").dependsOn ":data:generateReleaseJavadocJar"
    tasks.findByPath(":drawing:publishAarPublicationToMavenRepository").dependsOn ":drawing:generateReleaseJavadocJar"
    tasks.findByPath(":charting:publishAarPublicationToMavenRepository").dependsOn ":charting:generateReleaseJavadocJar"
    tasks.findByPath(":charting3d:publishAarPublicationToMavenRepository").dependsOn ":charting3d:generateReleaseJavadocJar"
    tasks.findByPath(":extensions:publishAarPublicationToMavenRepository").dependsOn ":extensions:generateReleaseJavadocJar"
    tasks.findByPath(":extensions3d:publishAarPublicationToMavenRepository").dependsOn ":extensions3d:generateReleaseJavadocJar"

    publishSciChartToMaven.dependsOn "" +
            ":core:publish",
            ":data:publish",
            ":drawing:publish",
            ":charting:publish",
            ":charting3d:publish",
            ":extensions:publish",
            ":extensions3d:publish"
}

task zip(type: Zip, dependsOn: deleteExistingZip) {
    from ('charting/build/outputs/aar') {
        include 'charting-release.aar'
    }
    from ('charting3d/build/outputs/aar') {
        include 'charting3d-release.aar'
    }
    from ('drawing/build/outputs/aar') {
        include 'drawing-release.aar'
    }
    from ('data/build/outputs/aar') {
        include 'data-release.aar'
    }
    from ('core/build/outputs/aar') {
        include 'core-release.aar'
    }
    from ('extensions/build/outputs/aar') {
        include 'extensions-release.aar'
    }
    from ('extensions3d/build/outputs/aar') {
        include 'extensions3d-release.aar'
    }
    destinationDir file("${rootDir}/outputAar/")
    baseName = 'sciChart'
}

task deleteExistingJavadocZip(type: Delete) {
    delete file("outputAar/sciChartJavadocs.zip")
}

gradle.projectsEvaluated {
    deleteExistingJavadocZip.dependsOn "" +
            ":core:generateReleaseJavadocJar",
            ":data:generateReleaseJavadocJar",
            ":drawing:generateReleaseJavadocJar",
            ":charting:generateReleaseJavadocJar",
            ":charting3d:generateReleaseJavadocJar"
}

task zipJavadocs(type: Zip, dependsOn: deleteExistingJavadocZip) {
    from (rootProject.ext.documentationFolder) {
        include 'charting-release-javadoc.jar'
    }
    from (rootProject.ext.documentationFolder) {
        include 'charting3d-release-javadoc.jar'
    }
    from (rootProject.ext.documentationFolder) {
        include 'drawing-release-javadoc.jar'
    }
    from (rootProject.ext.documentationFolder) {
        include 'data-release-javadoc.jar'
    }
    from (rootProject.ext.documentationFolder) {
        include 'core-release-javadoc.jar'
    }

    destinationDir file("${rootDir}/outputAar/")
    baseName = 'sciChartJavadocs'
}
//@ENDDELETE

allprojects {
    repositories {
        google()
        mavenCentral()
    }
//@BEGINDELETE
    // workaround for JVM crash when using Robolectric
    // https://github.com/robolectric/robolectric/issues/3202
    tasks.withType(Test) {
        jvmArgs '-XX:CompileCommand=exclude,org/robolectric/internal/bytecode/SandboxClassLoader*.*',
                '-XX:CompileCommand=exclude,org/robolectric/util/PerfStatsCollector*.*',
                '-XX:-UseLoopPredicate'
    }

    task cleanJavadocOutput(type: Delete, description: 'Clean Javadoc output') {
        delete("${rootDir}/outputJavadoc/${project.getName()}")
    }
//@ENDDELETE
}

//@BEGINDELETE
subprojects {
    apply plugin: 'maven-publish'

    def publishVersion = project.hasProperty('publishVersion') ? project.property('publishVersion') : System.getenv('publish_VERSION')
    def publishUser = project.hasProperty('publishUser') ? project.property('publishUser') : System.getenv('publish_USER')
    def publishPassword = project.hasProperty('publishPassword') ? project.property('publishPassword') : System.getenv('publish_PASSWORD')
    def publishUrl = project.hasProperty('publishUrl') ? project.property('publishUrl') : System.getenv('publish_URL')

    publishing {
        publications {
            aar(MavenPublication) {
                groupId 'com.scichart.library'
                artifactId project.getName()
                version publishVersion

                artifact source: file("$buildDir/outputs/aar/${project.getName()}-release.aar") ,extension:"aar"
                artifact source: file("$rootDir/outputJavadoc/${project.getName()}-release-javadoc.jar"), classifier:"javadoc", extension:"jar"

                pom.withXml {
                    def organizationsNode = asNode().appendNode('organization')
                    organizationsNode.appendNode('name','SciChart Ltd')
                    def dependenciesNode = asNode().appendNode('dependencies')

                    // List all compile dependencies and write to POM
                    configurations.api.getAllDependencies().each { Dependency dep ->
                        if (dep.group == null || dep.version == null || dep.name == null || dep.name == "unspecified")
                            return // ignore invalid dependencies

                        def dependencyNode = dependenciesNode.appendNode('dependency')
                        dependencyNode.appendNode('groupId', dep.group)
                        dependencyNode.appendNode('artifactId', dep.name)
                        dependencyNode.appendNode('version', dep.version)

                        if (!dep.transitive) {
                            // If this dependency is transitive, we should force exclude all its dependencies them from the POM
                            def exclusionNode = dependencyNode.appendNode('exclusions').appendNode('exclusion')
                            exclusionNode.appendNode('groupId', '*')
                            exclusionNode.appendNode('artifactId', '*')
                        } else if (!dep.properties.excludeRules.empty) {
                            // Otherwise add specified exclude rules
                            def exclusionNode = dependencyNode.appendNode('exclusions').appendNode('exclusion')
                            dep.properties.excludeRules.each { ExcludeRule rule ->
                                exclusionNode.appendNode('groupId', rule.group ?: '*')
                                exclusionNode.appendNode('artifactId', rule.module ?: '*')
                            }
                        }
                    }
                }
            }
        }
        repositories {
            maven {
                credentials {
                    username publishUser
                    password publishPassword
                }
                url publishUrl
            }
        }
    }
}
//@ENDDELETE
