//******************************************************************************
// SCICHART® Copyright SciChart Ltd. 2011-2016. All rights reserved.
//
// Web: http://www.scichart.com
// Support: support@scichart.com
// Sales:   sales@scichart.com
//
// build.gradle is part of the SCICHART® Examples. Permission is hereby granted
// to modify, create derivative works, distribute and publish any part of this source
// code whether for commercial, private or personal use.
//
// The SCICHART® examples are distributed in the hope that they will be useful, but
// without any warranty. It is provided "AS IS" without warranty of any kind, either
// expressed or implied.
//******************************************************************************
apply plugin: 'java'
// Top-level build file where you can add configuration options common to all sub-projects/modules.
buildscript {
    repositories {
        google()
        mavenCentral()
        jcenter()
    }
    dependencies {
        classpath 'com.android.tools.build:gradle:3.5.0'
        // NOTE: Do not place your application dependencies here; they belong
        // in the individual module build.gradle files
        classpath 'com.github.triplet.gradle:play-publisher:1.2.2'
    }
}
ext {
    minSdkVersion = project.hasProperty('minSdkVersion') ? project.getProperty('minSdkVersion') : 19
    compileSdkVersion = project.hasProperty('compileSdkVersion') ? project.getProperty('compileSdkVersion') : 29
    buildToolsVersion = project.hasProperty('buildToolsVersion') ? project.getProperty('buildToolsVersion') : '29.0.2'
    androidxAnnotationVersion = project.hasProperty('androidxAnnotationVersion') ? project.getProperty('androidxAnnotationVersion') : '1.1.0'
    testInstrumentationRunner = "androidx.test.runner.AndroidJUnitRunner"
    junitVersion = '4.12'
    junitTestRunnerVersion = '1.1.0'
    testRunnerVersion = '1.1.1'
    hamcrestVersion = '1.3'
    mockitoVersion = '2.27.0'
    robolectricVersion = '4.2'
    androidTestCore = '1.1.0'
    abiFiltersList = ['x86', 'x86_64', 'armeabi-v7a', 'arm64-v8a']
    sourceCompatibility = JavaVersion.VERSION_1_8
    minifyEnabled = true
    versionCode = 1
    versionName = "1.0"
    documentationFolder = "${rootDir}/outputJavadoc/"
    availableProcessors = Runtime.runtime.availableProcessors()
}
task deleteExistingZip(type: Delete) {
    delete file("outputAar/sciChart.zip")
}
gradle.projectsEvaluated {
    deleteExistingZip.dependsOn "" +
            ":core:testReleaseUnitTest",
            ":data:testReleaseUnitTest",
            ":drawing:testReleaseUnitTest",
            ":charting:testReleaseUnitTest",
            ":charting3d:testReleaseUnitTest",
            ":extensions:testReleaseUnitTest",
            ":extensions3d:testReleaseUnitTest"
}
task zip(type: Zip, dependsOn: deleteExistingZip) {
    from ('charting/build/outputs/aar') {
        include 'charting-release.aar'
    }
    from ('charting3d/build/outputs/aar') {
        include 'charting3d-release.aar'
    }
    from ('drawing/build/outputs/aar') {
        include 'drawing-release.aar'
    }
    from ('data/build/outputs/aar') {
        include 'data-release.aar'
    }
    from ('core/build/outputs/aar') {
        include 'core-release.aar'
    }
    from ('extensions/build/outputs/aar') {
        include 'extensions-release.aar'
    }
    from ('extensions3d/build/outputs/aar') {
        include 'extensions3d-release.aar'
    }
    destinationDir file("${rootDir}/outputAar/")
    baseName = 'sciChart'
}
task deleteExistingJavadocZip(type: Delete) {
    delete file("outputAar/sciChartJavadocs.zip")
}
gradle.projectsEvaluated {
    deleteExistingJavadocZip.dependsOn "" +
            ":core:generateReleaseJavadocJar",
            ":data:generateReleaseJavadocJar",
            ":drawing:generateReleaseJavadocJar",
            ":charting:generateReleaseJavadocJar",
            ":charting3d:generateReleaseJavadocJar"
}
task zipJavadocs(type: Zip, dependsOn: deleteExistingJavadocZip) {
    from (rootProject.ext.documentationFolder) {
        include 'charting-release-javadoc.jar'
    }
    from (rootProject.ext.documentationFolder) {
        include 'charting3d-release-javadoc.jar'
    }
    from (rootProject.ext.documentationFolder) {
        include 'drawing-release-javadoc.jar'
    }
    from (rootProject.ext.documentationFolder) {
        include 'data-release-javadoc.jar'
    }
    from (rootProject.ext.documentationFolder) {
        include 'core-release-javadoc.jar'
    }
    destinationDir file("${rootDir}/outputAar/")
    baseName = 'sciChartJavadocs'
}
allprojects {
    repositories {
        google()
        mavenCentral()
        jcenter()
    }
    // workaround for JVM crash when using Robolectric
    // https://github.com/robolectric/robolectric/issues/3202
    tasks.withType(Test) {
        jvmArgs '-XX:CompileCommand=exclude,org/robolectric/internal/bytecode/SandboxClassLoader*.*',
                '-XX:CompileCommand=exclude,org/robolectric/util/PerfStatsCollector*.*',
                '-XX:-UseLoopPredicate'
    }
    task cleanJavadocOutput(type: Delete, description: 'Clean Javadoc output') {
        delete("${rootDir}/outputJavadoc/${project.getName()}")
    }
}
subprojects {
}
